DESIGN:
  FUNCTIONS:
  - pass pointers to structs and other data entities
  - functions of form 'int f(A in, B *out)'
  - data-oriented design, structs capture game state and types, references to data types are passed around and modified by functions they're passed to
  GRAPHICS:
  - graphics functions should have windows passed in, along with whatever data refs needed.
  - instead of numbers representing map state and then chars representing that (indirect), chars are instead directly embedded into the map to both repesent its state and its view at once
  DATA:
  - following a DOD approach, a single struct of structs will capture the gamestate in static memory
  - structs will be packed to reduce memory footprint. The goal is to fit this in as small a space (<= 14kb) if possible
  - the map represents player board state, and known enemy board state.
  - the map is inextricably tied to the pins and ships structs, representing shot tiles and ship data respectively.
  GENERAL:
  - initial data structures like intial board position and the like will be initialized at compile time as global variables and macros



TODO:
- rendering the main game screen should update once to start, then
  - update log whenever an interaction is occuring
  - show tooltips below log window when necessary
  - update radars
    - once per enemy action for player radar
      - then local ships
      - then enemy pins
    - every player interaction for enemy radar
      - then placing pins to display information
- place ships and attack tiles
  - place ship
    - check ship
    - ensure ships are in bounds
    - ensure ships are not overlapping
  - attack tiles function
    - checks if selection is in pins, updates pos and adds to pins if it isn't
  OVERVIEW:
    - ship and pin structs will record gameplay elements, map isn't needed since queries on ship and tile location can be resolved effectively by looking through every ship (only 5 of them) and checking if local pins have been tried or not.
    - rendering the map then will consist of painting layers (water first, then ships, then pins)

- implement networking
  - client
  - server
  - peer-to-peer connection (basic netcat-like)
  - automatic search for nearby partners (lan searching)
  - singleplayer functionality (connect to second local instance, basically echo with randomness)
  - multiplaye functionality (turn-based send-recv loop, negotiate initial connection with MAIN and PEER)
- implement game loop
  - mark ships on player map
  - attack loop
    - verify tile on enemy side is a ship or not
    - update info on enemy local map and player local map
    - switch turns (how to record this?)

LATER:
- redesign structs to maintain funcitonality but optimize space
- optimize performance where possible
- rework alot of repeated rendering code into specialized functions, instead of writing out ncurses calls directly
- inline functions where it makes sense to, extract code into functions where it makes sense to.
- document and improve readability
