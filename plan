NOTES:
- SHIFT + K over a symbol to see its manual
- Plan, Design, then Develop

PLAN:
- initialize data in main function (start/init)
- parse ommand line arguments
- start ncurses
- while the game loop is running
  - update graphics   (render)
  - handle user move  (input)
  - get opponent move (input, network)
  - update game state (update, network)
- end ncurses


DESIGN:
  FUNCTIONS:
  - pass pointers to structs and other data entities
  - functions of form 'int f(T in, T *out)'
  - data-oriented design, structs capture game state and types, references to data types are passed around and modified by functions they're passed to
  GRAPHICS:
  - graphics functions should have windows passed in, along with whatever data refs needed.
  - instead of numbers representing map state and then chars representing that (indirect), chars are instead directly embedded into the map to both repesent its state and its view at once
  DATA:
  - following a DOD approach, a single struct of structs will capture the gamestate in static memory
  - structs will be packed to reduce memory footprint. The goal is to fit this in 14kb or less
  - the map represents player board state, and known enemy board state.
  - the map is inextricably tied to the pins and ships structs, representing shot tiles and ship data respectively.
  GENERAL:
  - initial data structures like intial board position and the like will be initialized at compile time as global variables and macros



TODO:
- implement game loop
  - ???
  - profit
- implement gamestate data struct
  - player ships with default ship data
  - player and enemy maps
  - player and enemy pins
  - turn number
  - who won/lost
