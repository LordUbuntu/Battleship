!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
Battleship	makefile	/^Battleship:$/;"	t
CC	makefile	/^CC=gcc$/;"	m
CFLAGS	makefile	/^CFLAGS=-std=c99 -Wall -Wextra$/;"	m
CLIBS	makefile	/^CLIBS=-lncurses$/;"	m
COPTS	makefile	/^COPTS=-O2$/;"	m
ELOG	src/elog.c	/^typedef struct ELOG$/;"	s	file:
ENTRY_DEFAULT	src/elog.c	/^#define ENTRY_DEFAULT /;"	d	file:
ENTRY_LENGTH	src/elog.c	/^#define ENTRY_LENGTH /;"	d	file:
ENTRY_NUM	src/elog.c	/^#define ENTRY_NUM /;"	d	file:
HIT	src/maps.c	/^#define HIT /;"	d	file:
MISS	src/maps.c	/^#define MISS /;"	d	file:
Map	src/maps.c	/^	int Map[10][10]; \/\/ coord and state of each tile$/;"	m	struct:radar	typeref:typename:int[10][10]	file:
NONE	src/maps.c	/^#define NONE /;"	d	file:
Position	src/maps.c	/^typedef struct Position$/;"	s	file:
Ship	src/maps.c	/^typedef struct Ship$/;"	s	file:
ShipData	src/maps.c	/^typedef struct ShipData$/;"	s	file:
clean	makefile	/^clean:$/;"	t
d	src/maps.c	/^	shipdat d; \/\/ information about the ship$/;"	m	struct:Ship	typeref:typename:shipdat	file:
elog	src/elog.c	/^} elog;$/;"	t	typeref:struct:ELOG	file:
evlog	src/elog.c	/^	char evlog[ENTRY_NUM][ENTRY_LENGTH]; \/\/ the log$/;"	m	struct:ELOG	typeref:typename:char[][]	file:
hit	src/maps.c	/^	bool hit; \/\/ state of point (hit or miss)$/;"	m	struct:Position	typeref:typename:bool	file:
index	src/elog.c	/^	int index; \/\/ current index being used$/;"	m	struct:ELOG	typeref:typename:int	file:
init_log	src/elog.c	/^init_log(void)$/;"	f	typeref:typename:elog
init_radar	src/maps.c	/^init_radar(shipdat* pieces, int size)$/;"	f	typeref:typename:radar
init_ship	src/maps.c	/^init_ship(char* name, int size, bool vert, int start_x, int start_y)$/;"	f	typeref:typename:ship
main	src/main.c	/^main(void)$/;"	f	typeref:typename:int
main	src/test.c	/^main(void)$/;"	f	typeref:typename:int
name	src/maps.c	/^	char* name; \/\/ the name of the ship OR what type of it is$/;"	m	struct:ShipData	typeref:typename:char *	file:
p	src/maps.c	/^	pos* p; \/\/ coordinate and state of each point of the ship$/;"	m	struct:Ship	typeref:typename:pos *	file:
pieces	src/maps.c	/^	shipdat* pieces; \/\/ knowledge of enemy pieces$/;"	m	struct:radar	typeref:typename:shipdat *	file:
pos	src/maps.c	/^} pos;$/;"	t	typeref:struct:Position	file:
print_log	src/elog.c	/^print_log(elog e)$/;"	f	typeref:typename:void
print_radar	src/maps.c	/^print_radar(radar r, int size)$/;"	f	typeref:typename:void
print_ship	src/maps.c	/^print_ship(ship s)$/;"	f	typeref:typename:void
radar	src/maps.c	/^typedef struct radar$/;"	s	file:
radar	src/maps.c	/^} radar;$/;"	t	typeref:struct:radar	file:
ship	src/maps.c	/^} ship;$/;"	t	typeref:struct:Ship	file:
shipdat	src/maps.c	/^} shipdat;$/;"	t	typeref:struct:ShipData	file:
size	src/maps.c	/^	size_t size; \/\/ how big the ship is$/;"	m	struct:ShipData	typeref:typename:size_t	file:
sunk	src/maps.c	/^	bool sunk; \/\/ whether the ship was sunk or not$/;"	m	struct:ShipData	typeref:typename:bool	file:
test	makefile	/^test:$/;"	t
test_log	src/elog.c	/^test_log(void)$/;"	f	typeref:typename:void
test_radar	src/maps.c	/^test_radar(void)$/;"	f	typeref:typename:void
test_ship	src/maps.c	/^test_ship(void)$/;"	f	typeref:typename:void
x	src/maps.c	/^	int x, y; \/\/ coordinate of point (x and y)$/;"	m	struct:Position	typeref:typename:int	file:
y	src/maps.c	/^	int x, y; \/\/ coordinate of point (x and y)$/;"	m	struct:Position	typeref:typename:int	file:
